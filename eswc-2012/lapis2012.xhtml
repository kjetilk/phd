<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" 
   "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"       
      xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
      xmlns:foaf="http://xmlns.com/foaf/0.1/"
      xmlns:cc="http://creativecommons.org/ns#"
      xmlns:dc="http://purl.org/dc/terms/"
      lang="en" xml:lang="en"> 
<head> 
  <title>The necessity of Hypermedia RDF and an approach to achieve it</title> 
  <meta name="copyright" 
   content="Copyright &#169; 2012 Kjetil Kjernsmo Creative Commons Attribution-Sharealike" /> 
  <meta name="duration" content="25" />
  <meta name="robots" content="noindex"/>
  <link rel="stylesheet" type="text/css" media="screen, projection, print" 
   href="http://www.w3.org/Talks/Tools/Slidy2/styles/slidy.css" /> 
  <link rel="stylesheet" type="text/css" media="screen, projection, print" 
   href="http://dev.kjernsmo.net/talks/kjetil-blue.css" /> 
  <script src="http://www.w3.org/Talks/Tools/Slidy2/scripts/slidy.js" 
   charset="utf-8" type="text/javascript"></script> 
  <style type="text/css"> 

    <!-- much of this CSS is from Mike Amundsen -->
    li .factor { padding-left : 2em; padding-right: 1em; }

    table.hfactors
    {
      border-collapse:collapse;
      float : right;
      background: white;

    }

    table.hfactors thead th
    { 
      padding-bottom:.3em;
    }

    table.hfactors tfoot th
    { 
      padding-top: .5em;
    }
    
    table.hfactors td
    {
      text-align:center;
      padding:.3em;
      color:#737373;
      font-size:12px;
    }

    table.hfactors td.ld
    {
      background-color:#3399ff;
      color:black;
    }

    table.hfactors td.cd
    {
      background-color:pink;
      color:black;
    }

    table.hfactors td.active
    {
      background-color:red;
      color:black;
    }

    table.hfactors td.border
    {
      border: 3px #737373 solid;
    }

    table.hfactors td a
    {
      color:inherit;
      text-decoration:none;
    }

    table.hfactors td a:hover
    {
      text-decoration:underline;
    }

    dl.hfactor-values
    {
      border: 2px #95ABD0 solid;
      clear : right;
      float : left;
    }
	    
  </style> 
</head>
<body>

<div class="slide cover title">

  <h1 rel="dc:title">The necessity of Hypermedia RDF and an approach to achieve it</h1>
  
  <p>Vision paper presented at <a href="http://lapis2012.linkedservices.org/">LAPIS 2012</a>, 
  <span property="dc:date" datatype="xsd:date">2012-05-27</span>.</p>

  <p resource="http://www.kjetil.kjernsmo.net/foaf#me" typeof="foaf:Person">
    <a href="mailto:kjetil@kjernsmo.net" rel="foaf:mbox" property="foaf:name">Kjetil Kjernsmo</a> &lt;kjetil@kjernsmo.net&gt;.
  </p>

  <p typeof="foaf:Organization">
    Ph.D. Research Fellow,
    <a rel="foaf:member" href="http://www.kjetil.kjernsmo.net/foaf#me"/>
    <a href="http://www.mn.uio.no/ifi/" rel="foaf:homepage" property="foaf:name">Department of Informatics, University of Oslo, Norway</a>
  </p>
        
  <p><tt>http://folk.uio.no/kjekje/2012/lapis2012.xhtml</tt></p>



  <p style="position:absolute; right:50px; bottom:100px; font-size: 10px">  
    <a href="" property="cc:attributionName">Kjetil Kjernsmo</a>
    <a rel="cc:license" href="http://creativecommons.org/licenses/by-sa/3.0/no/">Creative Commons Attribution-Sharealike 3.0 Norway License</a>.
  </p>
  
</div>

<div class="slide">
<h1>About me</h1>

<ul>
  <li>Got interested in the Semantic Web in 1998.</li>
  <li>Started working on a Semantic CMS in 2002.</li>
  <li>Put up the first big public SPARQL Endpoint with real data from Opera Community in 2005</li>
  <li>Other Opera Community work is cited in timbl's <a href="http://www.w3.org/DesignIssues/LinkedData">Linked Data Design Issue</a></li>
  <li>Member of W3C groups WCL XG, POWDER WG, SWEO IG, eGov IG and SPARQL 1.1 WG.</li>
  <li>In SWEO IG, took the initiative to and managed the Community Projects, out of which the Linking Open Data project was one.</li>
  <li>In SPARQL WG, edited the Features and Requirements Note</li>
  <li>Worked on Semantic Web technologies on several projects for Computas AS.</li>
  <li>Has connections to developer communities and contributes to Semantic Web in Perl</li>
  <li>...but my academic training is in theoretical astrophysics.</li>
</ul>
</div>

<div class="slide">
<h1>Motivations</h1>

<ul class="incremental">
 <li>Nebulous thoughts around the developer communities <small>(e.g. <a href="http://caines.ca/blog/programming/the-sun-is-setting-on-rails-style-mvc-frameworks/">The Sun is Setting on Rails-style MVC Frameworks</a>)</small></li>
 <li>Dissatisfaction with the SPARQL Graph Store specification.</li>
 <li>Linked Data needs to be more read-write.</li>
 <li>Semantic Web needs to be more fun, interesting and productive.</li>
</ul>

</div>

<div class="slide">
<h1>What can I do to Knossos?</h1>

<p>
Consider
<a href="http://dbpedia.org/data/Knossos"><tt>http://dbpedia.org/data/Knossos</tt></a>
</p>

<p>
With this URI I can get a description of Knossos with links so that I
can get more data and more links!
</p>

<ul class="incremental">
<li>Wow.</li>
<li>How exciting.</li>
</ul>

<!-- There's nothing here about writing, nothing about the rest of the stack -->

<p class="incremental">
Seriously, this is where we were at least 5 years ago!
</p>

</div>

<div class="slide">
<h1>What do I want to do?</h1>


<ul class="incremental">
<li>To look up the vocabulary used to describe Knossos.</li>
<li>To edit or augment the data.</li>
<li>To query the data (with SPARQL).</li>
</ul>

</div>

<div class="slide">
<h1>How can I do that?</h1>

<ul class="incremental">
  <li>Guess that the namespace URIs can be dereferenced (if I have them).</li>
  <li>Perhaps I can try a POST, DELETE or PUT? (what would the POST do?)</li>
  <li>Somewhere there might be a endpoint? Perhaps if I find the VoID description...</li>
</ul>

<p class="incremental">
If only it had been done RESTfully...
</p>

</div>

<div class="slide">
<h1>What is this REST thing?</h1>

<!-- REST is hard because the constraints don't map to a section -->

<div class="incremental">
<blockquote>
  <p>
  REST is defined by four interface constraints: identification of
  resources; manipulation of resources through representations;
  self-descriptive messages; and, <strong>hypermedia as the engine of
  application state</strong>.
  </p> <p class="cite"><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5">Roy Fielding</a></p>
</blockquote>

<p>
My emphasis: Note the HATEOAS constraint!
</p>

</div>

<!-- we trivially have part of that in Linked Data, the URIs for identification, we have RDF serializations as representations, which also can describe a lot, but...
What can we do other than traversing the graph? Semweb is not the only interaction that occurs, we live in a ecosystem with various sources. Devs will use what's most accessible to them. And accessibility comes from it not  being hard to use the data.  
 -->

<div class="incremental">
<h3>The take-away:</h3>
<p>
Don't make developers look up the spec!
</p>
</div>

</div>

<div class="slide">
<h1>Linked Data is RESTful, right?</h1>

<p>Some suggest that Linked Data is inherently RESTful since RDF serializations are hypermedia types.</p> <!-- danja did on his blog -->

<p class="incremental">My answer: Not really, it depends...</p>

<!-- No straitjacket. If all you want to do is read-only follow-your-nose navigation in data with known vocabularies, then yes -->

<p class="incremental">What did I want to do?</p>
<div  class="incremental">
<ul>
<li>To look up the vocabulary used to describe Knossos.</li>
<li>To edit or augment the data.</li>
<li>To query the data (with SPARQL).</li>
</ul>
</div>

<!-- if it can't do this, it isn't RESTful -->

<p class="incremental">RESTfulness must be judged on the basis of applications.</p>

<!-- It needs to help you do all you need to do -->

</div>

<div class="slide">
<h1>Turning RDF into a Hypermedia Type</h1>

<p>First, RDF isn't a media type, serializations are.</p>

<p>Mike Amundsen defines <a href="http://amundsen.com/hypermedia/">hypermedia types</a> as:</p>
<blockquote>
<p>
Hypermedia Types are MIME media types that contain native
hyper-linking semantics that induce application flow. For example,
HTML is a hypermedia type; XML is not.
</p>
</blockquote>


</div>

<div class="slide">
<h1>Mike Amundsen's "H Factor" classification</h1>

<!-- Very nice guidance -->


<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border">LO</td>
      <td class="border">LT</td>
      <td class="border">LN</td>
      <td class="border">LI</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Link Support</li>
  
  <ul>
    <li><span class="factor">[LE]</span><a href="http://amundsen.com/hypermedia/hfactor/#le" title="Embedding">Embedding links</a></li>
    <li><span class="factor">[LO]</span><a href="http://amundsen.com/hypermedia/hfactor/#lo" title="Outbound Links">Outbound links</a></li>
    <li><span class="factor">[LT]</span><a href="http://amundsen.com/hypermedia/hfactor/#lt" title="Templated queries">Templated queries</a></li>
    <li><span class="factor">[LN]</span><a href="http://amundsen.com/hypermedia/hfactor/#ln" title="Non-idempotent updates">Non-Idempotent updates</a></li>
    
    <li><span class="factor">[LI]</span><a href="http://amundsen.com/hypermedia/hfactor/#li" title="Idempotent updates">Idempotent updates</a></li>
  </ul>
  <li>Control Data Support</li>
  <ul>
    <li><span class="factor">[CR]</span><a href="http://amundsen.com/hypermedia/hfactor/#cr" title="Control data for reads">Control data for read requests</a></li>
    <li><span class="factor">[CU]</span><a href="http://amundsen.com/hypermedia/hfactor/#cu" title="Control data for updates">Control data for update requests</a></li>
    
    <li><span class="factor">[CM]</span><a href="http://amundsen.com/hypermedia/hfactor/#cm" title="Control data for methods">Control data for interface methods</a></li>
    <li><span class="factor">[CL]</span><a href="http://amundsen.com/hypermedia/hfactor/#cl" title="Control data for links">Control data for links</a></li>
  </ul>
</ol>

<p>(Shameless copy'n'paste).</p>

<!-- All the following examples are taken from Amundsen -->

</div>

<div class="slide">
<h1>Embedding links</h1>

<dl class="hfactor-values">
  <dt><a id="le"></a>LE</dt>
  
  <dd>
    <p>Support for embedded links (HTTP GET)</p>
    <pre class="code">&lt;img src="http://www.example.org/images/logo" title="company logo" /&gt;</pre>
  </dd>
</dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border active">LE</td>
      
      <td class="border">LO</td>
      <td class="border">LT</td>
      <td class="border">LN</td>
      <td class="border">LI</td>
    </tr>
  </tbody>
</table>

<p class="conclusion">
Closest I got was <tt>owl:imports</tt>, but is this really important in RDF context?
</p>

</div>


<div class="slide">
<h1>Outbound links</h1>

<dl class="hfactor-values">
  <dt><a id="lo"></a>LO</dt>
  <dd>
    <p>Support for out-bound navigational links (HTTP GET)</p>
    
    <pre class="code">&lt;a href="http://www.example.org/search" title="view search page"&gt;Search&lt;/a&gt;</pre>
  </dd>
</dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border active ld">LO</td>
      <td class="border">LT</td>
      <td class="border">LN</td>
      <td class="border">LI</td>
    </tr>
  </tbody>
</table>

<p class="conclusion">
The usual links of RDF, trivially supported.
</p>

</div>

<div class="slide">
<h1>Templated queries</h1>

  <dl class="hfactor-values">
    <dt><a id="lt"></a>LT</dt>
    <dd>
      <p>Support for templated queries (HTTP GET)</p>
      <pre class="code">
&lt;form method="get"&gt;
  &lt;label&gt;Search term:&lt;/label&gt;
  &lt;input name="query" type="text" value="" /&gt;
  &lt;input type="submit" /&gt;
&lt;/form&gt;</pre>
    </dd>
  </dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border active ld">LT</td>
      <td class="border">LN</td>
      <td class="border">LI</td>
    </tr>
  </tbody>
</table>

<!-- I was going to ridicule the idea of embedding SPARQL in RDF but -->
<p class="incremental conclusion">
W3C Submission <a href="http://www.w3.org/Submission/2011/SUBM-spin-sparql-20110222/">SPARQL Inferencing Notation (SPIN)</a> embeds SPARQL in RDF.
</p>

</div>


<div class="slide">
<h1>Non-Idempotent updates</h1>

<!-- if you do this again and again, the result may be different from time to time 
It should not depend on HTTP, but lets use HTTP examples -->


<dl class="hfactor-values">
  <dt><a id="ln"></a>LN</dt>
  <dd>
    <p>
      Support for non-idempotent updates (HTTP POST)
    </p>
    <pre class="code">    
&lt;form method="post" action="http://www.example.org/my-keywords"/&gt;
  &lt;label&gt;Keywords:&lt;/label&gt;
  &lt;input name="keywords" type="text" value="" /&gt;
  &lt;input type="submit" /&gt;
&lt;/form&gt;</pre>
  </dd>
</dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld active">LN</td>
      <td class="border">LI</td>
    </tr>
  </tbody>
</table>

<p class="conclusion">Two cases:</p>
<ol class="incremental">
  <li>Add some triples to the existing resource.</li>
  <li>Let the server decide the URI of the new resource (typically collection management)</li>
</ol>

</div>

<div class="slide">
<h1>How do we indicate updates can be done?</h1>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld active">LN</td>
      <td class="border">LI</td>
    </tr>
  </tbody>
</table>

<p class="incremental">We add triples to the resource!</p> 

<h2 class="incremental">Adding triples</h2>
<pre class="incremental">&lt;> hm:canBe hm:mergedInto .</pre>
<p class="incremental">Indicates that an <a href="http://www.w3.org/TR/rdf-mt/#graphdefs">RDF Merge</a> of payload into the resource should be done.</p> 

<p class="incremental">
<small>Might this be idempotent?</small>
</p>
</div>

<div class="slide">
<h1>More concrete example</h1>

<p>
Look up <a href="http://dbpedia.org/resource/Knossos"><tt>http://dbpedia.org/resource/Knossos</tt></a>, get a 303 to 
<a href="http://dbpedia.org/data/Knossos"><tt>http://dbpedia.org/data/Knossos</tt></a>, with:
</p>
<pre>
&lt;http://dbpedia.org/resource/Knossos> a yago:ArchaeologicalSitesInCrete ,
                yago:FormerPopulatedPlacesInGreece ,
                yago:MinoanArchaeologicalSitesInGreece .
# [...]
<span class="incremental">&lt;http://dbpedia.org/data/Knossos> hm:canBe hm:mergedInto .</span>
</pre>

</div>

<div class="slide">

<h1 class="incremental">Creating new resource</h1>

<div class="incremental">
  <pre>&lt;> hm:createSimilarAt &lt;../> .</pre>
  <p>When payload is sent to the object, the server may create a new URI for it.</p>
</div>

<!-- This would certainly be non-idempotent -->

</div>


<div class="slide">
<h1>Idempotent updates</h1>
<dl class="hfactor-values">
  <dt><a id="li"></a>LI</dt>
  <dd>
    <p>
      Support for idempotent updates (HTTP PUT, DELETE)
    </p>
  <pre class="code">    
function delete(id) 
{
  var client = new XMLHttpRequest();
  client.open("DELETE", "/records/"+id);
}</pre>
  </dd>
</dl>



<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld">LN</td>
      <td class="border ld active">LI</td>
    </tr>
  </tbody>
</table>

<p class="conclusion">
Two triples for replace and delete:
</p>

<pre class="incremental">&lt;> hm:canBe hm:replaced, hm:deleted .</pre>

<p class="incremental">
  Can we say that it is possible to <tt>PUT</tt> a resource to a new URL?
</p>


</div>

<div class="slide">
<h1>Control data for read requests</h1>

<dl class="hfactor-values">
  <dt><a id="cr"></a>CR</dt>
  <dd>
    <p>Support for modifying control data for read requests<br/> (e.g. HTTP <code>Accept-*</code> headers).</p>
    <pre class="code">&lt;xsl:include href="http://www.exmaple.org/newsfeed" 
  <em class="highlight">accept="application/rss"</em> /&gt;</pre>
    
  </dd>
</dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border active">CR</td>
      <td class="border">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld">LN</td>
      <td class="border ld">LI</td>
    </tr>
  </tbody>
</table>


<p style="clear:both">To tell the client to use certain header values?</p>

<!-- not relevant without import? -->

</div>

<div class="slide">
<h1>Control data for update requests</h1>
<dl class="hfactor-values">
  <dt><a id="cu"></a>CU</dt>
  <dd>
    <p>Support for modifying control data for update requests<br/> (e. g. <code>Content-*</code> headers).</p>
    <pre class="code">&lt;form method="post" 
  action="http://www.example.org/my-keywords"  
  <em class="highlight">enctype="application/x-www-form-urlencoded"</em> /&gt;
  &lt;label&gt;Keywords:&lt;/label&gt;
  &lt;input name="keywords" type="text" value="" /&gt;
  &lt;input type="submit" /&gt;
&lt;/form&gt;</pre>
  </dd>
</dl>
<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border active cd">CU</td>
      <td class="border">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld">LN</td>
      <td class="border ld">LI</td>
    </tr>
  </tbody>
</table>

<p class="conclusion">Perhaps triples such as this could be added:</p>
<pre>&lt;> hm:acceptsFormat &lt;http://www.w3.org/ns/formats/Turtle> .</pre>

<!-- conflicted about this, ended up not having it in the paper, seems
     to go well with HTML forms, but lets discuss -->

</div>


<div class="slide">
<h1>Control data for interface methods</h1>

<dl class="hfactor-values">
  <dt><a id="cm"></a>CM</dt>
  <dd>
    <p>Support for indicating the interface method for requests<br/> (e.g. HTTP <code>GET,POST,PUT,DELETE</code> methods).</p>
    <pre class="code">&lt;form <em class="highlight">method="post"</em> action="http://www.example.org/my-keywords" /&gt;
  &lt;label&gt;Keywords:&lt;/label&gt;
  &lt;input name="keywords" type="text" value="" /&gt;
  &lt;input type="submit" /&gt;
&lt;/form&gt;</pre>
  </dd>
</dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border cd">CU</td>
      <td class="border active cd">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld">LN</td>
      <td class="border ld">LI</td>
    </tr>
  </tbody>
</table>

<p class="conclusion">Describe e.g. HTTP methods for the predicates:</p>

<pre>
hm:replaced   hm:httpMethod "PUT" .
hm:deleted    hm:httpMethod "DELETED" .
hm:mergedInto hm:httpMethod "POST" .
</pre>

</div>

<div class="slide">
<h1>Control data for links</h1>

<dl class="hfactor-values">
  <dt><a id="cl"></a>CL</dt>
  <dd>
    <p>
      
      Support for adding semantic meaning to link elements using <br/> 
      <a href="http://www.iana.org/assignments/link-relations/link-relations.xhtml" title="Atom Link Relations">link relations</a>
      (e.g. HTML <code>rel</code> attribute).
    </p>

    <pre class="code">&lt;entry xmlns="http://www.w3.org/2005/Atom"&gt;
  &lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;
  &lt;id&gt;urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a&lt;/id&gt;
  &lt;updated&gt;2003-12-13T18:30:02Z&lt;/updated&gt;
  &lt;author&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/author&gt;
  &lt;content&gt;Some text.&lt;/content&gt;
  &lt;link <em class="highlight">rel="edit"</em> href="http://example.org/edit/first-post.atom"/&gt;
&lt;/entry&gt;</pre>
  </dd>
</dl>

<table class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border cd active">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border cd">CU</td>
      <td class="border cd">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld">LN</td>
      <td class="border ld">LI</td>
    </tr>
  </tbody>
</table>

<!-- disregarding the IANA link relations constraint -->

<p class="conclusion">Every object property in RDF is control data for links</p>


</div>


<div class="slide">
<h1>Summary of H Factors</h1>

<table style="float: none; font-size: 120%" class="hfactors">
  <thead>
    <tr>
      <th colspan="5"><a href="http://amundsen.com/hypermedia/hfactor/" title="Hypermedia Factors" class="hfactor-link">Hypermedia Factors</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      
      <td></td>
      <td></td>
      <td class="border cd">CL</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      
      <td class="border">CR</td>
      <td class="border cd">CU</td>
      <td class="border cd">CM</td>
      <td></td>
    </tr>
    <tr>
      <td class="border">LE</td>
      
      <td class="border ld">LO</td>
      <td class="border ld">LT</td>
      <td class="border ld">LN</td>
      <td class="border ld">LI</td>
    </tr>
  </tbody>
</table>

<ul class="incremental">
<li>Adding some/all of these triples to a resource and serialize it will yield hypermedia RDF</li>
<li>Note independence of:
  <ul>
    <li>RDF serialization.</li>
    <li>HTTP.</li>
  </ul>
</li>
</ul>

<!-- I'm not advocating that we don't use HTTP URIs. you need many of the properties of HTTP though -->

<p class="incremental">
Is there more?
</p>

</div>


<div class="slide">

<!-- Amundsen solicits more factors -->

<h1>New H Factors</h1>

<h2>Self-description</h2>

<p>Key strength of RDF.</p>

<pre class="incremental">
&lt;> void:inDataset [ void:vocabulary &lt;http://purl.org/dc/terms/>, 
                                    &lt;http://vocab/hypermedia#> . ] . 
</pre>

<p class="incremental">And then e.g.:</p>
 
<pre class="incremental">
hm:mergedInto rdfs:comment "Perform an RDF merge of payload into resource"@en ;
	      rdfs:seeAlso [ 
	        rdfs:label "RDF Merge" ;
	        rdfs:isDefinedBy &lt;http://www.w3.org/TR/rdf-mt/#graphdefs> . 
              ] .
</pre>

<p class="incremental">
Very powerful hypermedia factor that is rather unique to RDF.
</p>


</div>

<div class="slide">

<h1>New H Factors (cont.)</h1>

<h2>Generate control data for other languages</h2>

<p>E.g. <a href="http://w3c.org.au/raul">RaUL</a>.</p>

<!-- thanks to anonymous review, blame mhausenblas -->

<p>Used to generate other hypermedia types</p>
</div>

<div class="slide">
<h1>Bridging LOD and SPARQL</h1>

<!-- old colleagues said they only do navigation -->

<div class="figure incremental">
<img src="http://upload.wikimedia.org/wikipedia/commons/4/49/LedZeppelinmontage.jpg" alt="Band picture"/>
<img src="http://upload.wikimedia.org/wikipedia/en/d/d6/Pink_Floyd_-_all_members.jpg" alt="Band picture"/>
<p class="cite">From Wikipedia</p>
</div>


</div>

<div class="slide">
<h1>But who is this?</h1>

<div  style="text-align : center"  class="figure">
<img height="600" src="http://upload.wikimedia.org/wikipedia/commons/2/21/Roy_Harper_2011.jpg" alt="person"/>
</div>

<!-- TODO: movies and the whole story -->
</div>
<div class="slide">
<h1>To discover such things, you need either...</h1>

<ul class="incremental">
  <li>be a die-hard fan.</li>
  <li>desperately search for a good example for a research proposal.</li>
  <li>SPARQL federation-motivated source selection and query optimization.</li>
<!-- reference FedX in paper, turns out it doesn't do it. -->

</ul>
</div>


<div class="slide">
<h1>SPARQL must be a part of Linked Data</h1>

<blockquote>
<p>
To make the data be effectively linked, someone who only has the  URI of something must be able to find their way the SPARQL endpoint.  
</p>
<p class="cite">
Tim Berners-Lee in the <a href="http://www.w3.org/DesignIssues/LinkedData">Linked Data Design Issue</a>.
</p>
</blockquote>

<p>IOW, REST extends to linking SPARQL endpoints!</p>

<pre class="incremental">
&lt;> void:inDataset [ void:sparqlEndpoint &lt;/sparql> . ] .
</pre>

<!-- which is where youi'll find the SD -->

</div>

<div class="slide">
<h1>Lets return to Knossos</h1>

<!-- not the place, the information resource -->

<p>Linked Data has a unique problem: References may come from many different sources!</p>

<ul class="incremental">
  <li>Tourist guide data.</li>
  <li>Mythological creatures data.</li>
  <li>Minoan culture data.</li>
  <li>Bronze age sites data.</li>
  <li>etc., etc.</li>
</ul>

<!-- and they may again reference others 

And not only is the number of resources huge, the number of datasets is too

So, each resource may link to a big service description, but each
crossing of dataset boundaries would result in another get, possibly
to get much more than needed.
-->

<p class="incremental">Imagine a service description with:</p>

<pre class="incremental">&lt;http://dbpedia.org/data/Knossos>  hm:canBe hm:replaced, hm:deleted .
&lt;http://dbpedia.org/data/Phaistos> hm:canBe hm:replaced, hm:deleted .
[...]
</pre>

<p class="conclusion incremental">
Some triples need to be on every resource!
</p>


</div>

<div class="slide">
<h1>Question is: How many?</h1>

<pre>
&lt;> hm:canBe hm:mergedInto, hm:replaced, hm:deleted ;
   hm:createSimilarAt &lt;../> ;
   hm:acceptsFormat &lt;http://www.w3.org/ns/formats/Turtle> ;
   void:inDataset [ void:sparqlEndpoint &lt;/sparql> ;
                    void:vocabulary     &lt;http://purl.org/dc/terms/> .
                  ] .
</pre>

<!-- acceptsformat doesn't perhaps make much sense, can be inferred?
We really should have void description
So, we're left with the void dataset reference and the write triples
-->

<pre class="incremental">
&lt;> hm:canBe hm:mergedInto, hm:replaced, hm:deleted ;
   hm:createSimilarAt &lt;../> ;
   void:inDataset &lt;/dataset-1>
</pre>

<p class="incremental conclusion">
We're down to 5 triples in most cases!
</p>

<!-- they don't need to be stored, just added before serialization -->

</div>

<div class="slide">
<h1>What's wrong with the SPARQL 1.1 <a href="http://www.w3.org/TR/2012/WD-sparql11-http-rdf-update-20120501/">Graph Store Spec</a>?</h1>

<p>Intention:</p>
<blockquote>
<p>
This document describes the use of HTTP operations for the purpose of managing a collection of RDF graphs in the REST architectural style.
</p>
</blockquote>
<!-- I helped conceive it. I didn't appreciate REST at the time and thought that was what we should be doing. It derailed on a discussion on indirect graph identification. Basically, it happens because people import other people's graphs in their store without changing the graph name. Don't like it, but that's beside the point. -->


<ul class="incremental">
<li>Tied to HTTP.</li>
<li>Forces an URI for the default unnamed graph.</li>
<li>Superfluous URI out-of-band structure definitions.</li>
<li>Focuses on method definitions.</li>
<li>Language that misses the audience.</li>

</ul>

</div>



<div class="slide">
<h1>Weaknesses of my proposal</h1>

<ul class="incremental">
<li>You have to <code>GET</code> something first.</li> <!-- nothing can be presumed a priori, like the graph query parameter, which doesn't necessarily exist -->
<li>May break the expectation that when you <code>PUT</code> something, you'll <code>GET</code> the same thing back.</li> <!-- which may have implications on caching -->
<li>Inflates responses.</li> <!-- by adding a few triples to every resource. Not that many in the read-only case. -->
<li>Places requirements on SPARQL Service Descriptions that may not be easily handled in the current spec.</li>
<li>Is RDF 1.0 a good fit?</li>
</ul>


</div>



<!-- div class="slide">
<h1>Is RDF 1.0 adequate?</h1>

<p>Initial design:</p>

<pre>&lt;> hm:operations
   [ a hm:Operations ;
     hm:mergeInto &lt;> ;
     hm:delete &lt;> ;
[...]
</pre>


</div -->

<div class="slide">
<h1>Goals for the vocabulary</h1>

<ul class="incremental">
  <li>Uses RDF 1.0</li>
  <li>Can easily be implemented right now.</li> <!-- perfect has to wait -->
  <li>Serve as replacement for SPARQL 1.1 Graph Store.</li>
  <li>Substantial input to Linked Data Basic Profile.</li>
  <li>Triples that can be added to the serialization rather than stored.</li>
  <li>Triples that can be inferred.</li>
  <li>Suitable as W3C Member Submission</li>
</ul>

</div>

<!-- 
<div class="slide">

</div>

<div class="slide">

</div>
-->

<div class="slide">
<h1>Acknowledgements</h1>

<ul>
  <li>Chris Prather, Tamarou LLC.</li>
  <li>Martin G. Skjæveland, Martin Giese and Arne Hassel, University of Oslo.</li>
  <li>Gregory Todd Williams, Rensselaer Polytechnic Institute.</li>
  <li>Anonymous reviewers.</li>
</ul>


</div>

<div class="slide">
<h1>Questions</h1>

<h2>From the paper:</h2>
<ol>
<li>Is a single service endpoint enough for Linked Data?</li>
<li>Should the SPARQL 1.1 Graph Store HTTP Protocol be replaced by a
vocabulary like the above?</li>
<li>Can we create a better vocabulary for hypermedia RDF than the sketch above?</li>
</ol>

<h2>Additionally:</h2>

<ol>
<li>Where does hypermedia RDF and APIs such as <a href="http://code.google.com/p/linked-data-api/">linked-data-api</a> complement each other and where do they compete? 
</li>
</ol>

</div>

<!-- TODO
* Weaknesses of RDF
* Bring member submission draft
* Code

-->

<div class="slide">
<h1>A REST API should not be tied to HTTP</h1>

<p>Roy Fielding in blog post entitled: <a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">REST APIs must be hypertext-driven</a>:</p>

<blockquote>
<p>In general, any protocol element that uses a URI for identification must allow any URI scheme to be used for the sake of that identification.</p>
</blockquote>

<p>In the case of Linked Data, HTTP may be the most practical.</p>


</div>

<div class="slide">
<h1>Addressing unnamed default graph</h1>

<!-- Dataset can consist of one unnamed graph and zero or more named graphs. Trouble starts when we try to address the unnamed graph. The spec forces a graph name -->

<ul class="incremental">


<li>Need to address the unnamed default graph.</li>
<li>According to REST, it <strong>must</strong> be found in a message!</li>
<!-- forcing a name in the spec is NOT an alternative -->

<li><code>/rdf-graph-store?<b>default</b></code></li>

<li>It must be in the service description!</li>
<li>Which is more flexible!</li>
</ul>

<pre class="incremental">_:service sd:defaultDataset [
        a sd:Dataset ;
        sd:defaultGraph _:graph ;
        sd:namedGraph [
            a sd:NamedGraph ;
            sd:name &lt;http://www.example/named-graph> ;
            sd:graph _:graph .
        ]
    ] .
</pre>
<p class="incremental cite">Gregory Todd Williams, <i>private communication</i></p>

<!-- That is, the same graph is pointed to as the default graph, and as a named graph with a graph name. -->

</div>


<div class="slide">
<h1>URI structure</h1>

<!-- more general, the spec defines default and graph query parameters. It is debateable whether this breaks the constraint, but it is certainly not necessary -->

<p><code>/rdf-graph-store?<b>graph</b>=http%3A//www.example.com/other/graph</code></p>

<blockquote>
<p>
 A REST API must not define fixed resource names or hierarchies [...]. Servers must have the freedom to control their own namespace.
</p>
<p class="cite"><a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">Roy Fielding</a></p>
</blockquote>

</div>

<div class="slide">
<h1>What methods do</h1>

<p>Section <a href="http://www.w3.org/TR/sparql11-http-rdf-update/#graph-management">5 Graph Management Operations</a> is all about the use of HTTP verbs.</p>

<blockquote>
<p>
Any effort spent describing what methods to use on what URIs of interest should be entirely defined within the scope of the processing rules for a media type
</p>
<p class="cite"><a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">Roy Fielding</a></p>
</blockquote>

</div>


<div class="slide">
<h1>Overly academic language</h1>

<p>Remember: Don't make developers look up the spec!</p>

<!-- not only forces it us to look up the spec in violation of REST, but... -->
<blockquote>
<p class="incremental">
  Intuitively, the set of interpretations that satisfy [RDF-MT] the RDF graph the RDF document serializes can be thought of as this RDF graph content.
</p>
</blockquote>

<p class="incremental">This could have been implemented by several thousands...</p>

<!-- totally missing the audience -->

</div>

<div class="slide">
<h1>What the present proposal doesn't address</h1>

<ul>
<li>No <code>multipart/form-data</code> support.</li>
<li>No analog to the use of <code>PATCH</code> method.</li> <!-- which allows SPARQL Update to be sent as a patch. Important feature. -->
</ul>

<p class="incremental">In both cases, it needs to be defined in the processing rules of the MIME type.</p>

</div>

<div class="slide">
<h1>How it addresses the rest</h1>

<ul class="incremental">
<li>Direct graph identification is mostly trivial.</li>
<li>The only new thing is the specification of RDF Merge,</li>
<li>which can happen in-band in the vocabulary.
<pre>hm:mergedInto rdfs:comment "Perform an RDF merge of payload into resource"@en .</pre>
</li>
<li>It doesn't force a name in the indirect identification case, but any name may be supplied.</li>
<!-- so the case is fully supported, but you need to get the URI from the SD first. The SD can be found from any resource, remember. 
You could argue this is a weakness of REST, you need to get information from a resource first, you can't hardcode -->
<li>Unnamed default graph needs to be in the Service Description if supported.</li>
<!-- Would want it to be prettier than it is... -->
</ul>

<p class="incremental conclusion">Comprehensive replacement of SPARQL 1.1 Graph Store, but with REST.</p>

</div>


</body>
</html>
